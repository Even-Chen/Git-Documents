Git 「分散式版本控管機制」  (Mercurial 是另一套分散式版本控管機制)

代碼託管跟版本控制服務 廠商

GitHub : 目前最大廠商, 缺點免費版不提供私密代碼
Bitbucket : 同時支援 Git 跟 Mercurial , 可支援私密代碼, 缺點是一個 Repo 協同運作最多五人


1. 安裝 Git (Windows 64 or 32 位元版)
2. 到 GitHub 申請帳號 (目前最多人用的 Git 遠端儲存庫)
3. 安裝 Windows 版 GUI 操作介面
   GitHubDesktop 或 SourceTree (兩者互不相容, 初看 SourceTree 介面比較好用)
   SourceTree 也可適用多種 Git 遠端儲存庫

   安裝參考 https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/02.md


4. 小型專案先不要建立分支  Branch, 以免產生衝突協調問題

5. 使用 GitHub 設定組別及權限控管, 另外也可使用 fork 跟 pull request 來跨帳號合併
https://github.com/doggy8088/Learn-Git-in-30-days/blob/master/zh-tw/28.md


名詞及指令說明

Git Repository 建立儲存庫 (即專案名稱) 簡稱 Repo

工作目錄 (tracked/untracked) files
索引 (staged/unstaged) files

git clone 將遠端儲存庫複製到本地，並建立工作目錄與本地儲存庫 (就是 .git 資料夾)

git pull 將遠端儲存庫的最新版下載回來，並且將遠端分支合併到本地分支 (將 origin/master 遠端分支合併到 master 本地分支)
         (= git fetch + git merge origin/master)

git push 將本地儲存庫中目前分支的所有相關物件推送到遠端儲存庫中。

git fetch 將遠端儲存庫的最新版下載回來，這個命令不包含「合併」分支的動作。


git branch 秀出目前所在分支, 預設是 master

git checkout [branch_name] 切換分支

git stash 暫存版
git commit 建立版本

git reset --hard ORIG_HEAD 還原保留最後一次的變更

git rebase 調換、修改、插入、編輯、拆解、壓縮、刪除 commit 的順序
